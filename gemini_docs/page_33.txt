URL: https://ai.google.dev/gemini-api/docs/function-calling

Modelos
/
Português – Brasil
Fazer login
Documentos da API Gemini
Referência da API
Manual
Visão geral
Começar
Início rápido
Chaves de API
Bibliotecas
Notas da versão
Compatibilidade com o OpenAI
Fórum de desenvolvedores
Modelos
Todos os modelos
Preço
Limites de taxas
Informações de faturamento
Recursos
Geração de texto
Geração de imagens
Visão
Compreensão de áudio
Contexto longo
Execução do código
Saída estruturada
Pensando
Chamadas de função
Entendimento de documentos
Embasamento com a Pesquisa Google
Ajuste de detalhes
Embeddings
Guias
API Live
O armazenamento em cache de contexto
Engenharia de comando
Contagem de tokens
Segurança
Outros recursos
Gemini para pesquisa
Programa acadêmico da Gemini
Casos de uso
Aplicativos
Solução de problemas
Solução de problemas com APIs
Solução de problemas do AI Studio
Google Workspace
Jurídico
Termos de Serviço
Regiões disponíveis
Outras políticas de uso
O Gemini 2.5 Pro Experimental, nosso modelo mais avançado, já está disponível. Saiba mais
Esta página foi traduzida pela API Cloud Translation.
Switch to English
Página inicial
Gemini API
Modelos
Isso foi útil?
Envie comentários
Chamada de função com a API Gemini
Nesta página
Como a chamada de função funciona
Etapa 1: definir a declaração de função
Etapa 2: chamar o modelo com declarações de função
Etapa 3: executar o código da função set_light_values
Etapa 4: criar uma resposta amigável ao usuário com o resultado da função e chamar o modelo novamente
A chamada de função permite conectar modelos a ferramentas e APIs externas. Em vez de gerar respostas de texto, o modelo entende quando chamar funções e fornece os parâmetros necessários para executar ações reais. Isso permite que o modelo funcione como uma ponte entre a linguagem natural e as ações e dados do mundo real. As chamadas de função têm três casos de uso principais:
Aumentar o conhecimento:acesse informações de fontes externas, como bancos de dados, APIs e bases de conhecimento.
Ampliar os recursos:use ferramentas externas para realizar cálculos e ampliar as limitações do modelo, como usar uma calculadora ou criar gráficos.
Realizar ações:interagir com sistemas externos usando APIs, como agendar compromissos, criar faturas, enviar e-mails ou controlar dispositivos de casa inteligente.
Receber informações sobre o clima
Agendar reunião
Criar gráfico
Python
JavaScript
REST
 from google import genai
 from google.genai import types

 # Define the function declaration for the model
 schedule_meeting_function = {
     "name": "schedule_meeting",
     "description": "Schedules a meeting with specified attendees at a given time and date.",
     "parameters": {
         "type": "object",
         "properties": {
             "attendees": {
                 "type": "array",
                 "items": {"type": "string"},
                 "description": "List of people attending the meeting.",
             },
             "date": {
                 "type": "string",
                 "description": "Date of the meeting (e.g., '2024-07-29')",
             },
             "time": {
                 "type": "string",
                 "description": "Time of the meeting (e.g., '15:00')",
             },
             "topic": {
                 "type": "string",
                 "description": "The subject or topic of the meeting.",
             },
         },
         "required": ["attendees", "date", "time", "topic"],
     },
 }

 # Configure the client and tools
 client = genai.Client(api_key=os.getenv("GEMINI_API_KEY"))
 tools = types.Tool(function_declarations=[schedule_meeting_function])
 config = types.GenerateContentConfig(tools=[tools])

 # Send request with function declarations
 response = client.models.generate_content(
     model="gemini-2.0-flash",
     contents="Schedule a meeting with Bob and Alice for 03/14/2025 at 10:00 AM about the Q3 planning.",
     config=config,
 )

 # Check for a function call
 if response.candidates[0].content.parts[0].function_call:
     function_call = response.candidates[0].content.parts[0].function_call
     print(f"Function to call: {function_call.name}")
     print(f"Arguments: {function_call.args}")
     #  In a real app, you would call your function here:
     #  result = schedule_meeting(**function_call.args)
 else:
     print("No function call found in the response.")
     print(response.text)
Como a chamada de função funciona
A chamada de função envolve uma interação estruturada entre o aplicativo, o modelo e as funções externas. Confira os detalhes do processo:
Definir a declaração de função:defina a declaração de função no código do aplicativo. As declarações de função descrevem o nome, os parâmetros e a finalidade da função para o modelo.
Chamar o LLM com declarações de função:envie o comando do usuário com as declarações de função para o modelo. Ele analisa a solicitação e determina se uma chamada de função seria útil. Nesse caso, ele responde com um objeto JSON estruturado.
Executar o código da função (sua responsabilidade): o modelo não executa a função. É responsabilidade do seu aplicativo processar a resposta e verificar a chamada de função, se
Sim: extraia o nome e os argumentos da função e execute a função correspondente no seu aplicativo.
Não:o modelo forneceu uma resposta de texto direta ao comando. Esse fluxo é menos enfatizado no exemplo, mas é um resultado possível.
Criar uma resposta amigável ao usuário:se uma função foi executada, capture o resultado e o envie de volta ao modelo em uma próxima vez na conversa. Ele vai usar o resultado para gerar uma resposta final fácil de usar que incorpora as informações da chamada de função.
Esse processo pode ser repetido em várias rodadas, permitindo interações e fluxos de trabalho complexos. O modelo também oferece suporte à chamada de várias funções em uma única vez (chamada de função paralela) e em sequência (chamada de função composta).
Etapa 1: definir a declaração de função
Defina uma função e a declaração dela no código do aplicativo para permitir que os usuários definam valores de luz e façam uma solicitação de API. Essa função pode chamar serviços ou APIs externos.
Python
JavaScript
from google.genai import types

# Define a function that the model can call to control smart lights
set_light_values_declaration = {
    "name": "set_light_values",
    "description": "Sets the brightness and color temperature of a light.",
    "parameters": {
        "type": "object",
        "properties": {
            "brightness": {
                "type": "integer",
                "description": "Light level from 0 to 100. Zero is off and 100 is full brightness",
            },
            "color_temp": {
                "type": "string",
                "enum": ["daylight", "cool", "warm"],
                "description": "Color temperature of the light fixture, which can be `daylight`, `cool` or `warm`.",
            },
        },
        "required": ["brightness", "color_temp"],
    },
}

# This is the actual function that would be called based on the model's suggestion
def set_light_values(brightness: int, color_temp: str) -> dict[str, int | str]:
    """Set the brightness and color temperature of a room light. (mock API).

    Args:
        brightness: Light level from 0 to 100. Zero is off and 100 is full brightness
        color_temp: Color temperature of the light fixture, which can be `daylight`, `cool` or `warm`.

    Returns:
        A dictionary containing the set brightness and color temperature.
    """
    return {"brightness": brightness, "colorTemperature": color_temp}
Etapa 2: chamar o modelo com declarações de função
Depois de definir as declarações de função, você pode solicitar que o modelo use a função. Ele analisa as declarações de comando e função e decide responder diretamente ou chamar uma função. Se uma função for chamada, o objeto de resposta vai conter uma sugestão de chamada de função.
Python
JavaScript
from google import genai

# Generation Config with Function Declaration
tools = types.Tool(function_declarations=[set_light_values_declaration])
config = types.GenerateContentConfig(tools=[tools])

# Configure the client
client = genai.Client(api_key=os.getenv("GEMINI_API_KEY"))

# Define user prompt
contents = [
    types.Content(
        role="user", parts=[types.Part(text="Turn the lights down to a romantic level")]
    )
]

# Send request with function declarations
response = client.models.generate_content(
    model="gemini-2.0-flash", config=config, contents=contents
)

print(response.candidates[0].content.parts[0].function_call)
O modelo retorna um objeto functionCall em um esquema compatível com a OpenAPI, especificando como chamar uma ou mais das funções declaradas para responder à pergunta do usuário.
Python
JavaScript
id=None args={'color_temp': 'warm', 'brightness': 25} name='set_light_values'
Etapa 3: executar o código da função set_light_values
Extraia os detalhes da chamada de função da resposta do modelo, analise os argumentos e execute a função set_light_values no código.
Python
JavaScript
# Extract tool call details
tool_call = response.candidates[0].content.parts[0].function_call

if tool_call.name == "set_light_values":
    result = set_light_values(**tool_call.args)
    print(f"Function execution result: {result}")
Etapa 4: criar uma resposta amigável ao usuário com o resultado da função e chamar o modelo novamente
Por fim, envie o resultado da execução da função de volta ao modelo para que ele possa incorporar essas informações na resposta final ao usuário.
Python
JavaScript
# Create a function response part
function_response_part = types.Part.from_function_response(
    name=tool_call.name,
    response={"result": result},
)

# Append function call and result of the function execution to contents
contents.append(types.Content(role="model", parts=[types.Part(function_call=tool_call)])) # Append the model's function call message
contents.append(types.Content(role="user", parts=[function_response_part])) # Append the function response

final_response = client.models.generate_content(
    model="gemini-2.0-flash",
    config=config,
    contents=contents,
)

print(final_response.text)
Isso conclui o fluxo de chamada de função. O modelo usou a função set_light_values para realizar a ação de solicitação do usuário.
Declarações de função
Ao implementar a chamada de função em um comando, você cria um objeto tools, que contém um ou mais function declarations. Você define funções usando JSON, especificamente com um subconjunto selecionado do formato de esquema da OpenAPI. Uma única declaração de função pode incluir os seguintes parâmetros:
name (string): um nome exclusivo para a função (get_weather_forecast, send_email). Use nomes descritivos sem espaços ou caracteres especiais (use sublinhados ou letras em caixa alta e baixa).
description (string): uma explicação clara e detalhada do propósito e dos recursos da função. Isso é crucial para que o modelo entenda quando usar a função. Seja específico e dê exemplos se for útil ("Encontra cinemas com base na localização e, opcionalmente, no título do filme que está em cartaz no momento").
parameters (objeto): define os parâmetros de entrada esperados pela função.
type (string): especifica o tipo de dados geral, como object.
properties (objeto): lista parâmetros individuais, cada um com:
type (string): o tipo de dados do parâmetro, como string, integer, boolean, array.
description (string): uma descrição da finalidade e do formato do parâmetro. Dê exemplos e restrições ("A cidade e o estado, por exemplo, "São Paulo, SP" ou um CEP, por exemplo, '95616'.").
enum (matriz, opcional): se os valores do parâmetro forem de um conjunto fixo, use "enum" para listar os valores permitidos em vez de apenas descrevê-los na descrição. Isso melhora a precisão ("enum": ["daylight", "cool", "warm"]).
required (matriz): uma matriz de strings que lista os nomes dos parâmetros obrigatórios para a função funcionar.
Chamada de função paralela
Além de chamar uma função de turno único, você também pode chamar várias funções de uma só vez. A chamada de função paralela permite executar várias funções de uma vez e é usada quando as funções não dependem uma da outra. Isso é útil em cenários como a coleta de dados de várias fontes independentes, como a recuperação de detalhes do cliente de diferentes bancos de dados ou a verificação de níveis de inventário em vários armazéns ou a realização de várias ações, como a conversão de um apartamento em um disco.
Python
JavaScript
power_disco_ball = {
    "name": "power_disco_ball",
    "description": "Powers the spinning disco ball.",
    "parameters": {
        "type": "object",
        "properties": {
            "power": {
                "type": "boolean",
                "description": "Whether to turn the disco ball on or off.",
            }
        },
        "required": ["power"],
    },
}

start_music = {
    "name": "start_music",
    "description": "Play some music matching the specified parameters.",
    "parameters": {
        "type": "object",
        "properties": {
            "energetic": {
                "type": "boolean",
                "description": "Whether the music is energetic or not.",
            },
            "loud": {
                "type": "boolean",
                "description": "Whether the music is loud or not.",
            },
        },
        "required": ["energetic", "loud"],
    },
}

dim_lights = {
    "name": "dim_lights",
    "description": "Dim the lights.",
    "parameters": {
        "type": "object",
        "properties": {
            "brightness": {
                "type": "number",
                "description": "The brightness of the lights, 0.0 is off, 1.0 is full.",
            }
        },
        "required": ["brightness"],
    },
}
Chame o modelo com uma instrução que possa usar todas as ferramentas especificadas. Este exemplo usa uma tool_config. Para saber mais, leia sobre como configurar a chamada de função.
Python
JavaScript
from google import genai
from google.genai import types

# Set up function declarations
house_tools = [
    types.Tool(function_declarations=[power_disco_ball, start_music, dim_lights])
]

config = {
    "tools": house_tools,
    "automatic_function_calling": {"disable": True},
    # Force the model to call 'any' function, instead of chatting.
    "tool_config": {"function_calling_config": {"mode": "any"}},
}

# Configure the client
client = genai.Client(api_key=os.getenv("GEMINI_API_KEY"))

chat = client.chats.create(model="gemini-2.0-flash", config=config)
response = chat.send_message("Turn this place into a party!")

# Print out each of the function calls requested from this single call
print("Example 1: Forced function calling")
for fn in response.function_calls:
    args = ", ".join(f"{key}={val}" for key, val in fn.args.items())
    print(f"{fn.name}({args})")
Cada um dos resultados impressos reflete uma única chamada de função solicitada pelo modelo. Para enviar os resultados de volta, inclua as respostas na mesma ordem em que foram solicitadas.
O SDK do Python oferece suporte a um recurso chamado chamada de função automática, que converte a função Python em declarações, processa a execução da chamada de função e o ciclo de resposta para você. Confira abaixo um exemplo do nosso caso de uso do disco.
Observação: no momento, a chamada de função automática é um recurso exclusivo do SDK do Python.
Python
from google import genai
from google.genai import types

# Actual implementation functions
def power_disco_ball_impl(power: bool) -> dict:
    """Powers the spinning disco ball.

    Args:
        power: Whether to turn the disco ball on or off.

    Returns:
        A status dictionary indicating the current state.
    """
    return {"status": f"Disco ball powered {'on' if power else 'off'}"}

def start_music_impl(energetic: bool, loud: bool) -> dict:
    """Play some music matching the specified parameters.

    Args:
        energetic: Whether the music is energetic or not.
        loud: Whether the music is loud or not.

    Returns:
        A dictionary containing the music settings.
    """
    music_type = "energetic" if energetic else "chill"
    volume = "loud" if loud else "quiet"
    return {"music_type": music_type, "volume": volume}

def dim_lights_impl(brightness: float) -> dict:
    """Dim the lights.

    Args:
        brightness: The brightness of the lights, 0.0 is off, 1.0 is full.

    Returns:
        A dictionary containing the new brightness setting.
    """
    return {"brightness": brightness}

config = {
    "tools": [power_disco_ball_impl, start_music_impl, dim_lights_impl],
}

chat = client.chats.create(model="gemini-2.0-flash", config=config)
response = chat.send_message("Do everything you need to this place into party!")

print("\nExample 2: Automatic function calling")
print(response.text)
# I've turned on the disco ball, started playing loud and energetic music, and dimmed the lights to 50% brightness. Let's get this party started!
Chamada de função com composição
O Gemini 2.0 oferece suporte à chamada de função com composição, o que significa que o modelo pode encadear várias chamadas de função. Por exemplo, para responder "Pegar a temperatura no meu local atual", a API Gemini pode invocar uma função get_current_location() e uma função get_weather() que use o local como parâmetro.
Observação: no momento, a chamada de função com estrutura é um recurso exclusivo da API Live. A declaração da função run(), que processa a configuração assíncrona do WebSocket, é omitida para encurtar.
Python
JavaScript
# Light control schemas
turn_on_the_lights_schema = {'name': 'turn_on_the_lights'}
turn_off_the_lights_schema = {'name': 'turn_off_the_lights'}

prompt = """
  Hey, can you write run some python code to turn on the lights, wait 10s and then turn off the lights?
  """

tools = [
    {'code_execution': {}},
    {'function_declarations': [turn_on_the_lights_schema, turn_off_the_lights_schema]}
]

await run(prompt, tools=tools, modality="AUDIO")
Modos de chamada de função
A API Gemini permite controlar como o modelo usa as ferramentas fornecidas (declarações de função). Mais especificamente, é possível definir o modo no function_calling_config.
AUTO (Default): o modelo decide se vai gerar uma resposta de linguagem natural ou sugerir uma chamada de função com base no comando e no contexto. Esse é o modo mais flexível e recomendado para a maioria dos casos.
ANY: o modelo é restrito a sempre prever uma chamada de função e garantir a adesão ao esquema de função. Se allowed_function_names não for especificado, o modelo poderá escolher entre qualquer uma das declarações de função fornecidas. Se allowed_function_names for fornecido como uma lista, o modelo só poderá escolher entre as funções dessa lista. Use esse modo quando precisar de uma chamada de função em resposta a cada comando (se aplicável).
NONE: o modelo não pode fazer chamadas de função. Isso equivale a enviar uma solicitação sem declarações de função. Use essa opção para desativar temporariamente a chamada de função sem remover as definições de ferramentas.
Python
JavaScript
from google.genai import types

# Configure function calling mode
tool_config = types.ToolConfig(
    function_calling_config=types.FunctionCallingConfig(
        mode="ANY", allowed_function_names=["get_current_temperature"]
    )
)

# Create the generation config
config = types.GenerateContentConfig(
    temperature=0,
    tools=[tools],  # not defined here.
    tool_config=tool_config,
)
Chamada de função automática (somente Python)
Ao usar o SDK do Python, você pode fornecer funções do Python diretamente como ferramentas. O SDK converte automaticamente a função Python em declarações e processa a execução da chamada de função e o ciclo de resposta para você. O SDK do Python vai:
Detecta respostas de chamadas de função do modelo.
Chame a função Python correspondente no código.
Envia a resposta da função de volta ao modelo.
Retorna a resposta de texto final do modelo.
Para usar isso, defina sua função com dicas de tipo e um docstring e transmita a própria função (não uma declaração JSON) como uma ferramenta:
Python
from google import genai
from google.genai import types

# Define the function with type hints and docstring
def get_current_temperature(location: str) -> dict:
    """Gets the current temperature for a given location.

    Args:
        location: The city and state, e.g. San Francisco, CA

    Returns:
        A dictionary containing the temperature and unit.
    """
    # ... (implementation) ...
    return {"temperature": 25, "unit": "Celsius"}

# Configure the client and model
client = genai.Client(api_key=os.getenv("GEMINI_API_KEY"))  # Replace with your actual API key setup
config = types.GenerateContentConfig(
    tools=[get_current_temperature]
)  # Pass the function itself

# Make the request
response = client.models.generate_content(
    model="gemini-2.0-flash",
    contents="What's the temperature in London?",
    config=config,
)

print(response.text)  # The SDK handles the function call and returns the final text
É possível desativar a chamada automática de funções com:
Python
# To disable automatic function calling:
config = types.GenerateContentConfig(
    tools=[get_current_temperature],
    automatic_function_calling=types.AutomaticFunctionCallingConfig(disable=True)
)
Declaração de esquema de função automática
A extração automática de esquemas de funções do Python não funciona em todos os casos. Por exemplo, ele não processa casos em que você descreve os campos de um objeto-dicionário aninhado. A API pode descrever qualquer um dos seguintes tipos:
Python
AllowedType = (int | float | bool | str | list['AllowedType'] | dict[str, AllowedType])
Para conferir como é o esquema inferido, converta-o usando from_callable:
Python
def multiply(a: float, b: float):
    """Returns a * b."""
    return a * b

fn_decl = types.FunctionDeclaration.from_callable(callable=multiply, client=client)

# to_json_dict() provides a clean JSON representation.
print(fn_decl.to_json_dict())
Uso de várias ferramentas: combine ferramentas nativas com chamadas de função
Com o Gemini 2.0, é possível ativar várias ferramentas que combinam ferramentas nativas com chamadas de função ao mesmo tempo. Confira um exemplo que ativa duas ferramentas, Grounding with Google Search e code execution, em uma solicitação usando a API Live.
Observação: no momento, o uso de várias ferramentas é um recurso exclusivo da API Live. A declaração da função run(), que processa a configuração assíncrona do WebSocket, é omitida para encurtar.
Python
JavaScript
# Multiple tasks example - combining lights, code execution, and search
prompt = """
  Hey, I need you to do three things for me.

    1.  Turn on the lights.
    2.  Then compute the largest prime palindrome under 100000.
    3.  Then use Google Search to look up information about the largest earthquake in California the week of Dec 5 2024.

  Thanks!
  """

tools = [
    {'google_search': {}},
    {'code_execution': {}},
    {'function_declarations': [turn_on_the_lights_schema, turn_off_the_lights_schema]} # not defined here.
]

# Execute the prompt with specified tools in audio modality
await run(prompt, tools=tools, modality="AUDIO")
Os desenvolvedores de Python podem testar isso no notebook de uso da ferramenta de API ao vivo.
Usar o protocolo de contexto de modelo (MCP)
O Protocolo de contexto do modelo (MCP) é um padrão aberto para conectar aplicativos de IA a ferramentas, fontes de dados e sistemas externos. O MCP fornece um protocolo comum para que os modelos acessem o contexto, como funções (ferramentas), fontes de dados (recursos) ou comandos predefinidos. É possível usar modelos com o servidor MCP usando os recursos de chamada de ferramentas.
Os servidores do MCP expõem as ferramentas como definições de esquema JSON, que podem ser usadas com declarações de função compatíveis com o Gemini. Isso permite que você use um servidor MCP com modelos Gemini diretamente. Confira um exemplo de como usar um servidor MCP local com o Gemini, o SDK para Python e o SDK mcp.
import asyncio
import os
from datetime import datetime
from google import genai
from google.genai import types
from mcp import ClientSession, StdioServerParameters
from mcp.client.stdio import stdio_client

client = genai.Client(api_key=os.getenv("GEMINI_API_KEY"))

# Create server parameters for stdio connection
server_params = StdioServerParameters(
    command="npx",  # Executable
    args=["-y", "@philschmid/weather-mcp"],  # Weather MCP Server
    env=None,  # Optional environment variables
)

async def run():
    async with stdio_client(server_params) as (read, write):
        async with ClientSession(read, write) as session:
            # Prompt to get the weather for the current day in London.
            prompt = f"What is the weather in London in {datetime.now().strftime('%Y-%m-%d')}?"
            # Initialize the connection between client and server
            await session.initialize()

            # Get tools from MCP session and convert to Gemini Tool objects
            mcp_tools = await session.list_tools()
            tools = [
                types.Tool(
                    function_declarations=[
                        {
                            "name": tool.name,
                            "description": tool.description,
                            "parameters": {
                                k: v
                                for k, v in tool.inputSchema.items()
                                if k not in ["additionalProperties", "$schema"]
                            },
                        }
                    ]
                )
                for tool in mcp_tools.tools
            ]

            # Send request to the model with MCP function declarations
            response = client.models.generate_content(
                model="gemini-2.0-flash",
                contents=prompt,
                config=types.GenerateContentConfig(
                    temperature=0,
                    tools=tools,
                ),
            )

            # Check for a function call
            if response.candidates[0].content.parts[0].function_call:
                function_call = response.candidates[0].content.parts[0].function_call
                print(function_call)
                # Call the MCP server with the predicted tool
                result = await session.call_tool(
                    function_call.name, arguments=function_call.args
                )
                print(result.content[0].text)
                # Continue as shown in step 4 of "How Function Calling Works"
                # and create a user friendly response
            else:
                print("No function call found in the response.")
                print(response.text)

# Start the asyncio event loop and run the main function
asyncio.run(run())
Modelos compatíveis
Os modelos experimentais não estão incluídos. Você pode encontrar os recursos na página Visão geral do modelo.
Modelo Chamada de função Chamada de função paralela Chamada de função com estrutura definida
(somente API Live)
Gemini 2.0 Flash ✔️ ✔️ ✔️
Gemini 2.0 Flash-Lite X X X
Gemini 1.5 Flash ✔️ ✔️ ✔️
Gemini 1.5 Pro ✔️ ✔️ ✔️
Práticas recomendadas
Descrição de funções e parâmetros:seja extremamente claro e específico nas descrições. O modelo depende deles para escolher a função correta e fornecer argumentos adequados.
Nomes:use nomes de função descritivos (sem espaços, pontos ou traços).
Tipagem forte:use tipos específicos (números inteiros, strings, enumerações) para parâmetros para reduzir erros. Se um parâmetro tiver um conjunto limitado de valores válidos, use um tipo enumerado.
Seleção de ferramentas:embora o modelo possa usar um número arbitrário de ferramentas, fornecer muitas delas pode aumentar o risco de selecionar uma ferramenta incorreta ou subótima. Para melhores resultados, tente fornecer apenas as ferramentas relevantes para o contexto ou a tarefa, mantendo o conjunto ativo em um máximo de 10 a 20. Considere a seleção dinâmica de ferramentas com base no contexto da conversa se você tiver um grande número de ferramentas.
Engenharia de comando:
Fornecer contexto: informe ao modelo qual é a função dele (por exemplo, "Você é um assistente de clima útil.").
Dar instruções: especificar como e quando usar funções (por exemplo, "Não adivinhe as datas. Use sempre uma data futura para as previsões.").
Incentive a explicação: instrua o modelo a fazer perguntas esclarecedoras, se necessário.
Temperatura:use uma temperatura baixa (por exemplo, 0) para chamadas de função mais determinísticas e confiáveis.
Validação:se uma chamada de função tiver consequências significativas (por exemplo, fazer um pedido), valide a chamada com o usuário antes de executá-la.
Tratamento de erros: implemente um tratamento de erros robusto nas suas funções para lidar com entradas inesperadas ou falhas de API. Retorne mensagens de erro informativas que o modelo pode usar para gerar respostas úteis ao usuário.
Segurança:tenha cuidado com a segurança ao chamar APIs externas. Use mecanismos de autenticação e autorização adequados. Evite expor dados sensíveis em chamadas de função.
Limites de tokens:as descrições e os parâmetros da função são contabilizados no limite de tokens de entrada. Se você estiver atingindo os limites de token, considere limitar o número de funções ou a duração das descrições, dividindo tarefas complexas em conjuntos de funções menores e mais focados.
Observações e limitações
Somente um subconjunto do esquema da OpenAPI é aceito.
Os tipos de parâmetros compatíveis no Python são limitados.
A chamada de função automática é um recurso exclusivo do SDK para Python.
Isso foi útil?
Envie comentários
Exceto em caso de indicação contrária, o conteúdo desta página é licenciado de acordo com a Licença de atribuição 4.0 do Creative Commons, e as amostras de código são licenciadas de acordo com a Licença Apache 2.0. Para mais detalhes, consulte as políticas do site do Google Developers. Java é uma marca registrada da Oracle e/ou afiliadas.
Última atualização 2025-04-04 UTC.
Termos de Serviço
Privacidade
Português – Brasil